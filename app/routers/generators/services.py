import logging
import os
from datetime import datetime

import torch

from app.services import model_manager, styles_service
from config import BASE_GENERATED_IMAGES_DIR

from .schemas import GenerateImageRequest

logger = logging.getLogger(__name__)


class GeneratorsService:
    def __init__(self) -> None:
        pass

    def get_seed(self, seed: int):
        random_seed = None

        if seed != -1:
            torch.manual_seed(seed)

            if torch.cuda.is_available():
                torch.cuda.manual_seed(seed)

            logger.info(f'Using random seed: {seed}')

            random_seed = seed
        else:
            random_seed = int(torch.randint(0, 2**32 - 1, (1,)).item())
            torch.manual_seed(random_seed)

            if torch.cuda.is_available():
                torch.cuda.manual_seed(random_seed)

            logger.info(f'Using auto-generated random seed: {random_seed}')

        return random_seed

    def apply_hires_fix(self, hires_fix: bool):
        if hires_fix:
            logger.warning(
                'Hires fix requested, '
                'but not fully implemented in this MVP. Generating directly at requested resolution.'
            )

    def apply_styles(self, user_prompt: str, styles: list[str]):
        if styles:
            styles_service.apply_styles(user_prompt, styles)
        else:
            logger.info('No styles applied to the image generation request.')

    def check_nsfw_content(self, generation_output):
        if (
            hasattr(generation_output, 'nsfw_content_detected')
            and generation_output.nsfw_content_detected is not None
            and any(generation_output.nsfw_content_detected)
        ):
            logger.warning('NSFW content detected')

            raise ValueError('Generated image flagged as NSFW by safety checker.')

    def save_image(self, generated_images_list):
        if not generated_images_list:
            logger.error('No images were generated by the pipeline.')
            raise ValueError('Failed to generate any image.')

        os.makedirs(BASE_GENERATED_IMAGES_DIR, exist_ok=True)
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S_%f')
        filename = os.path.join(BASE_GENERATED_IMAGES_DIR, f'{timestamp}.png')

        image = generated_images_list[0]
        image.save(filename)

        logger.info(f'Generated image saved to: {filename}')

        return filename

    def generate_image(self, request: GenerateImageRequest):
        logger.info(f'Received image generation request: {request}')

        pipe = model_manager.pipe

        if pipe is None:
            logger.warning('Attempted to generate image, but no model is loaded.')

            raise ValueError('No model is currently loaded')

        try:
            logger.info(
                f"Generating image(s) for prompt: '{request.prompt}' "
                f'with steps={request.steps}, CFG={request.cfg_scale}, '
                f'size={request.width}x{request.height}'
            )
            random_seed = self.get_seed(request.seed)

            self.apply_hires_fix(request.hires_fix)
            self.apply_styles(request.prompt, request.styles)

            model_manager.set_sampler(request.sampler)

            generation_output = pipe(
                prompt=request.prompt,
                negative_prompt=request.negative_prompt,
                num_inference_steps=request.steps,
                guidance_scale=request.cfg_scale,
                height=request.height,
                width=request.width,
                generator=torch.Generator(device=pipe.device).manual_seed(random_seed),
            )

            generated_images_list = generation_output[0]

            self.check_nsfw_content(generation_output)

            filename = self.save_image(generated_images_list)

            return filename

        except FileNotFoundError as error:
            logger.error(f'Model directory not found: {error}')

            raise ValueError(f'Model files not found: {error}')
        except Exception as error:
            logger.exception(f'Failed to generate image for prompt: "{request.prompt}"')

            raise ValueError(f'Failed to generate image: {error}')


generator_service = GeneratorsService()
