Metadata-Version: 2.4
Name: localai-backend
Version: 0.1.0
Summary: LocalAI backend server
Requires-Python: >=3.11.3
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: accelerate==1.9.0
Requires-Dist: aiohappyeyeballs==2.6.1
Requires-Dist: aiohttp==3.12.14
Requires-Dist: aiosignal==1.4.0
Requires-Dist: alabaster==1.0.0
Requires-Dist: alembic==1.16.4
Requires-Dist: annotated-types==0.7.0
Requires-Dist: anyio==4.10.0
Requires-Dist: asttokens==3.0.0
Requires-Dist: attr==0.3.2
Requires-Dist: attrs==25.3.0
Requires-Dist: babel==2.17.0
Requires-Dist: bidict==0.23.1
Requires-Dist: brotli==1.1.0
Requires-Dist: brotlicffi==1.1.0.0
Requires-Dist: certifi==2025.8.3
Requires-Dist: cffi==1.17.1
Requires-Dist: chardet==5.2.0
Requires-Dist: charset-normalizer==3.4.3
Requires-Dist: click==8.2.1
Requires-Dist: comm==0.2.3
Requires-Dist: configparser==7.2.0
Requires-Dist: coverage==7.10.4
Requires-Dist: cryptography==45.0.5
Requires-Dist: decorator==5.2.1
Requires-Dist: diffusers==0.34.0
Requires-Dist: docopt==0.6.2
Requires-Dist: docutils==0.21.2
Requires-Dist: executing==2.2.0
Requires-Dist: fanstatic==1.5
Requires-Dist: fastapi==0.116.1
Requires-Dist: filelock==3.18.0
Requires-Dist: frozenlist==1.7.0
Requires-Dist: fsspec==2025.7.0
Requires-Dist: greenlet==3.2.4
Requires-Dist: h11==0.16.0
Requires-Dist: h2==4.2.0
Requires-Dist: hf-xet==1.1.8
Requires-Dist: hpack==4.1.0
Requires-Dist: htmlparser==0.0.2
Requires-Dist: httpcore==1.0.9
Requires-Dist: httpx==0.27.2
Requires-Dist: huggingface-hub==0.33.4
Requires-Dist: hyperframe==6.1.0
Requires-Dist: idna==3.10
Requires-Dist: imagesize==1.4.1
Requires-Dist: importlib-metadata==8.7.0
Requires-Dist: iniconfig==2.1.0
Requires-Dist: ipython==9.4.0
Requires-Dist: ipython-pygments-lexers==1.1.1
Requires-Dist: ipywidgets==8.1.7
Requires-Dist: jaraco-classes==3.4.0
Requires-Dist: jaraco-context==6.0.1
Requires-Dist: jaraco-functools==4.3.0
Requires-Dist: jedi==0.19.2
Requires-Dist: jeepney==0.9.0
Requires-Dist: jinja2==3.1.6
Requires-Dist: js==1.0
Requires-Dist: jupyterlab-widgets==3.0.15
Requires-Dist: keyring==25.6.0
Requires-Dist: legacy-cgi==2.6.3
Requires-Dist: mako==1.3.10
Requires-Dist: markupsafe==3.0.2
Requires-Dist: matplotlib-inline==0.1.7
Requires-Dist: more-itertools==10.7.0
Requires-Dist: mpmath==1.3.0
Requires-Dist: multidict==6.6.4
Requires-Dist: networkx==3.5
Requires-Dist: numpy==2.3.2
Requires-Dist: nvidia-cublas-cu12==12.6.4.1
Requires-Dist: nvidia-cuda-cupti-cu12==12.6.80
Requires-Dist: nvidia-cuda-nvrtc-cu12==12.6.77
Requires-Dist: nvidia-cuda-runtime-cu12==12.6.77
Requires-Dist: nvidia-cudnn-cu12==9.5.1.17
Requires-Dist: nvidia-cufft-cu12==11.3.0.4
Requires-Dist: nvidia-cufile-cu12==1.11.1.6
Requires-Dist: nvidia-curand-cu12==10.3.7.77
Requires-Dist: nvidia-cusolver-cu12==11.7.1.2
Requires-Dist: nvidia-cusparse-cu12==12.5.4.2
Requires-Dist: nvidia-cusparselt-cu12==0.6.3
Requires-Dist: nvidia-nccl-cu12==2.26.2
Requires-Dist: nvidia-nvjitlink-cu12==12.6.85
Requires-Dist: nvidia-nvtx-cu12==12.6.77
Requires-Dist: packaging==25.0
Requires-Dist: parso==0.8.4
Requires-Dist: pexpect==4.9.0
Requires-Dist: pillow==11.3.0
Requires-Dist: pip==25.2
Requires-Dist: pipreqs==0.4.13
Requires-Dist: pluggy==1.6.0
Requires-Dist: prompt-toolkit==3.0.51
Requires-Dist: propcache==0.3.2
Requires-Dist: psutil==7.0.0
Requires-Dist: ptyprocess==0.7.0
Requires-Dist: pure-eval==0.2.3
Requires-Dist: pycparser==2.22
Requires-Dist: pydantic==2.11.7
Requires-Dist: pydantic-core==2.33.2
Requires-Dist: pygments==2.19.2
Requires-Dist: pyopenssl==25.1.0
Requires-Dist: pytest==8.3.3
Requires-Dist: pytest-asyncio==0.24.0
Requires-Dist: pytest-cov==5.0.0
Requires-Dist: python-engineio==4.12.2
Requires-Dist: python-socketio==5.14.0
Requires-Dist: pyyaml==6.0.2
Requires-Dist: redis==6.2.0
Requires-Dist: regex==2025.7.34
Requires-Dist: requests==2.32.5
Requires-Dist: roman-numerals-py==3.1.0
Requires-Dist: safetensors==0.6.2
Requires-Dist: secretstorage==3.3.3
Requires-Dist: setuptools==80.9.0
Requires-Dist: simple-websocket==1.1.0
Requires-Dist: simplejson==3.20.1
Requires-Dist: sniffio==1.3.1
Requires-Dist: snowballstemmer==3.0.1
Requires-Dist: sphinx==8.2.3
Requires-Dist: sphinxcontrib-applehelp==2.0.0
Requires-Dist: sphinxcontrib-devhelp==2.0.0
Requires-Dist: sphinxcontrib-htmlhelp==2.1.0
Requires-Dist: sphinxcontrib-jsmath==1.0.1
Requires-Dist: sphinxcontrib-qthelp==2.0.0
Requires-Dist: sphinxcontrib-serializinghtml==2.0.0
Requires-Dist: sqlalchemy==2.0.41
Requires-Dist: stack-data==0.6.3
Requires-Dist: starlette==0.47.2
Requires-Dist: sympy==1.14.0
Requires-Dist: tenacity==9.1.2
Requires-Dist: thread==2.0.5
Requires-Dist: tokenizers==0.21.4
Requires-Dist: torch==2.7.1
Requires-Dist: tqdm==4.67.1
Requires-Dist: traitlets==5.14.3
Requires-Dist: transformers==4.53.2
Requires-Dist: triton==3.3.1
Requires-Dist: typing-extensions==4.14.1
Requires-Dist: typing-inspection==0.4.1
Requires-Dist: urllib3==2.5.0
Requires-Dist: urllib3-secure-extra==0.1.0
Requires-Dist: uvicorn==0.35.0
Requires-Dist: wcwidth==0.2.13
Requires-Dist: webob==1.8.9
Requires-Dist: widgetsnbextension==4.0.14
Requires-Dist: wsproto==1.2.0
Requires-Dist: yarg==0.1.10
Requires-Dist: yarl==1.20.1
Requires-Dist: zipp==3.23.0
Requires-Dist: zstandard==0.23.0
Dynamic: license-file

# LocalAI Backend

A FastAPI-based backend server for local AI image generation operations, supporting Stable Diffusion models, style management, and real-time generation updates via WebSocket.

## Features

- **AI Image Generation**: Generate images using Stable Diffusion models with customizable parameters
- **Model Management**: Download, load, and manage multiple AI models locally
- **Style System**: Apply predefined styles with prompt templates and negative prompts
- **Hardware Monitoring**: Real-time GPU/CPU usage and memory tracking
- **Generation History**: Track and retrieve past image generations
- **Image Resizing**: Batch resize generated images
- **Real-time Updates**: WebSocket support for live generation progress
- **User Management**: Basic user authentication and profiles
- **SQLite Database**: Persistent storage with Alembic migrations

## Tech Stack

- **FastAPI** - Modern async web framework
- **PyTorch** - Deep learning framework
- **Diffusers** - Hugging Face diffusion models library
- **Transformers** - Model tokenizers and utilities
- **SQLAlchemy** - Database ORM with Alembic migrations
- **Socket.IO** - Real-time bidirectional communication
- **Pydantic** - Data validation and settings management
- **Uvicorn** - ASGI server

## Requirements

- Python 3.11+
- CUDA-compatible GPU (optional, for faster generation)
- 8GB+ RAM recommended
- 50GB+ disk space for models (some models can exceed 50GB)

## Installation

### 1. Clone the repository

```bash
git clone <repository-url>
cd localai_backend
```

### 2. Create virtual environment

```bash
python -m venv .venv
source .venv/bin/activate  # On Windows: .venv\Scripts\activate
```

### 3. Install dependencies

Using [uv](https://docs.astral.sh/uv/) (recommended):

```bash
uv sync
```

Or with pip:

```bash
pip install -r requirements.txt
pip install -r requirements-dev.txt  # For development
```

### 4. Initialize database

```bash
alembic upgrade head
```

## Running the Server

### Development mode with auto-reload

```bash
uvicorn main:app --reload
```

### Production mode

```bash
uvicorn main:app --host 0.0.0.0 --port 8000
```

The API will be available at `http://localhost:8000` with interactive docs at `http://localhost:8000/docs`.

## Project Structure

```
localai_backend/
├── main.py                     # FastAPI application entry point
├── config.py                   # Configuration settings
├── app/
│   ├── features/               # Feature modules (routers)
│   │   ├── downloads/          # Model downloading
│   │   ├── generators/         # Image generation
│   │   ├── hardware/           # System monitoring
│   │   ├── histories/          # Generation history
│   │   ├── models/             # Model management
│   │   ├── resizes/            # Image resizing
│   │   ├── styles/             # Style management
│   │   └── users/              # User management
│   ├── cores/                  # Core services
│   │   ├── model_manager.py    # Model loading/unloading
│   │   └── samplers.py         # Sampling algorithms
│   ├── database/               # Database models and service
│   ├── services/               # Utility services
│   ├── socket/                 # Socket.IO integration
│   ├── schemas/                # Pydantic schemas
│   └── styles/                 # Style definitions
├── alembic/                    # Database migrations
├── static/                     # Static files and generated images
├── tests/                      # Test suite
└── requirements.txt            # Python dependencies
```

## API Endpoints

### Core Endpoints

- `GET /` - Health check
- `GET /docs` - OpenAPI documentation (Swagger UI)

### Features

- `/users` - User management
- `/models` - AI model operations (list, load, unload)
- `/downloads` - Download models from Hugging Face
- `/hardware` - System resource monitoring
- `/generators` - Image generation with parameters
- `/styles` - Style templates management
- `/histories` - Generation history tracking
- `/resizes` - Image resizing operations

### WebSocket

- `/socket.io` - Real-time generation progress and updates

## Development

### Running tests

```bash
pytest -q --cov=app --cov-report=xml:coverage.xml
```

### Linting and formatting

```bash
# Check code style
ruff check

# Auto-fix issues
ruff check --fix

# Format code
ruff format
```

### Database migrations

```bash
# Create a new migration
alembic revision --autogenerate -m "description of changes"

# Apply migrations
alembic upgrade head

# Rollback migration
alembic downgrade -1
```

## Configuration

Configuration is managed through `config.py` with the following key settings:

- `CACHE_FOLDER`: Model cache directory (default: `./.cache`)
- `GENERATED_IMAGES_FOLDER`: Output directory for generated images
- `STATIC_FOLDER`: Static files directory

Override settings using environment variables as needed.

## Contributing

1. Follow the coding style defined in `ruff.toml` (tabs, single quotes, 120 char line length)
2. Use conventional commit messages (`feat:`, `fix:`, `refactor:`, etc.)
3. Write tests for new features
4. Ensure all tests pass and code is linted before submitting PRs

See `AGENTS.md` for detailed development guidelines.

## License

MIT License - see LICENSE file for details

## Acknowledgments

- Built with [FastAPI](https://fastapi.tiangolo.com/)
- Powered by [Hugging Face Diffusers](https://huggingface.co/docs/diffusers)
- Real-time updates via [python-socketio](https://python-socketio.readthedocs.io/)
